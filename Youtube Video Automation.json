{
  "name": "Youtube Video Automation",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        832,
        -464
      ],
      "id": "f0a27ffb-1eca-47dc-acfa-f7b2a9a4f077",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        576,
        -288
      ],
      "id": "6127f699-0a21-4232-9b80-f37d7388f9e2",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "637BcLYyNoLohyZQ",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "Give me one catchy ASMR short concept in under 10 words. Must evoke cozy indoor vibes with peace and quiet, sometimes featuring rain, campfire warmth, steaming drinks, soft lighting, sunny mornings, or gentle background sounds.",
        "options": {
          "systemMessage": "You are an AI that specializes in identifying viral trends on platforms like TikTok and YouTube Shorts. Your job is to brainstorm a single, simple, and satisfying ASMR video concept that captures a cozy indoor aesthetic. The vibe should always feel peaceful and quiet, sometimes featuring rain, but other times using elements like campfire warmth, soft lighting, steaming drinks, or gentle background sounds. You must only return the idea as a single line of plain text. Do not add any extra words, formatting, or explanation."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        1056,
        -464
      ],
      "id": "59343b7f-c83c-4950-b922-f1582a6b50ce",
      "name": "Idea Generator"
    },
    {
      "parameters": {
        "jsonSchemaExample": "[\n  {\n    \"Caption\": \"Diver Removes Nets Off Whale üêã #whalerescue #marinelife #oceanrescue #seahelpers #love #nature #instagood #explore #viral #savenature #oceanguardians #cleanoceans\",\n    \"Idea\": \"Diver carefully cuts tangled net from distressed whale in open sea\",\n    \"Environment\": \"Open ocean, sunlight beams through water, diver and whale, cinematic realism\",\n    \"Sound\": \"Primary sound description under 15 words\",\n    \"Status\": \"for production\"\n  }\n]\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        896,
        -32
      ],
      "id": "355e096e-32fa-4488-9e52-522fc8905196",
      "name": "Output Parser"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1168,
        -32
      ],
      "id": "3179db1e-4ee8-45ab-9b22-9cabab987a52",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "637BcLYyNoLohyZQ",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"Idea\": \"An obsidian rock being sliced with a shimmering knife\",\n  \"Environment\": \"Clean studio table, subtle light reflections\",\n  \"Sound\": \"Crisp slicing, deep grinding, and delicate crumbling\",\n  \"Scene 1\": \"Extreme macro shot: a razor-sharp, polished knife blade presses into the dark, granular surface of an obsidian rock, just beginning to indent.\",\n  \"Scene 2\": \"Close-up: fine, iridescent dust particles erupt from the point of contact as the blade cuts deeper into the obsidian, catching the studio light.\",\n  \"Scene 3\": \"Mid-shot: the knife, held perfectly steady, has formed a shallow, clean groove across the obsidian's shimmering surface, revealing a new, smooth texture.\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1456,
        -32
      ],
      "id": "f4344429-0396-4c49-b364-dd0680c4d531",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.wavespeed.ai/api/v3/bytedance/seedance-v1-lite-t2v-480p",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "application/json",
        "body": "={   \"aspect_ratio\": \"9:16\",   \n    \"duration\": 10,\n    \"prompt\": \"VIDEO THEME: {{ $('Prompting Agent').item.json.output.Idea }}| WHAT HAPPENS IN THE VIDEO: {{ $json.description }} | WHERE THE VIDEO IS SHOT: {{ $('Prompting Agent').item.json.output.Environment }}\"\n}",
        "options": {
          "batching": {
            "batch": {
              "batchSize": 1,
              "batchInterval": 3000
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1984,
        -256
      ],
      "id": "0fdf5bf9-a375-4007-bba4-21b9d09ce8c2",
      "name": "Create Wavespeed Clips",
      "credentials": {
        "httpHeaderAuth": {
          "id": "3moYUlbQqCPihjLS",
          "name": "Wavespeed Creds"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://api.wavespeed.ai/api/v3/predictions/{{ $json.data.id }}/result",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1760,
        -48
      ],
      "id": "308a14f5-0cc9-4413-b825-b351f5446e44",
      "name": "Get Wavespeed Clips",
      "credentials": {
        "httpHeaderAuth": {
          "id": "3moYUlbQqCPihjLS",
          "name": "Wavespeed Creds"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Take the following trendy ASMR idea‚Äîfocused on cozy indoor aesthetics with peace and quiet‚Äîand expand it into a full production plan using your required JSON format. The entire concept must take place indoors. Vibes may include rain, fireplace/campfire warmth, steaming drinks, soft lighting, gentle background sounds, or sunny morning ambience. No narration; only natural ASMR audio. Optimize for 9:16 vertical and 12‚Äì25 seconds, loop-friendly.\n\nThe short ASMR idea is:\n[[\n{{ $json.output }}\n]]\n\nHave your final expanded \"Idea\" field be in this format: \"(color/style) (object) being (action)\".\nOn-theme examples for inspiration: warm amber ceramic mug being filled, rain-streaked windowpane being gently wiped, glowing beeswax candle being trimmed, soft wool blanket being folded, sunlit glass teapot being poured, charcoal-black fireplace logs being rearranged.\n\nUse the Think tool to review your output for indoor-only setting, cohesive sound design, and loopability.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=Role: You are an AI designed to generate 1 immersive, satisfying idea based on a user-provided topic that always fits a cozy indoor aesthetic. Your output must be formatted as a JSON array (single line) and follow all the rules below exactly.\n\nRULES:\n\nOnly return 1 idea at a time.\n\nThe user will provide a key topic (e.g. \"rainy window view,\" \"fireplace crackling,\" \"steaming coffee pour,\" \"soft blanket folding\").\n\nThe Idea must:\n\nBe under 13 words.\n\nDescribe an interesting and viral-worthy moment, action, or event related to the provided topic.\n\nAlways take place indoors, with vibes such as rain, campfire warmth, steaming drinks, soft lighting, sunny mornings, or gentle background sounds.\n\nThe Caption must:\n\nBe short, punchy, and viral-friendly.\n\nInclude one relevant emoji.\n\nInclude exactly 12 hashtags in this order:\n4 topic-relevant hashtags\n4 all-time most popular hashtags\n4 currently trending hashtags\n\nAll hashtags must be lowercase.\n\nSet Status to \"for production\" (always).\n\nThe Environment must:\n\nBe under 20 words.\n\nMatch the action in the Idea exactly.\n\nClearly describe:\n\nWhere the event is happening (e.g. rustic wooden table by rain-speckled window, sunlit kitchen counter)\n\nKey visuals or background details (e.g. steam rising, firelight flicker, soft shadows)\n\nStyle of scene (e.g. macro close-up, cinematic slow-motion)\n\nThe Sound must:\n\nBe under 15 words.\n\nDescribe the primary sound that makes sense for the cozy indoor aesthetic. This will be fed to a sound model later on.\n\nOUTPUT FORMAT (single-line JSON array):\n[\n  {\n    \"Caption\": \"Morning magic ‚òÄÔ∏è #coffee #cozymornings #asmr #indooraesthetic #oddlysatisfying #viral #fyp #explore #trending #tiktok #relax #comfort\",\n    \"Idea\": \"Golden coffee stream pouring into a warm ceramic mug\",\n    \"Environment\": \"Macro close-up on rustic table by sunny window, soft shadows, cinematic slow-motion\",\n    \"Sound\": \"Gentle coffee pour with soft ceramic clink\",\n    \"Status\": \"for production\"\n  }\n]\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        736,
        -256
      ],
      "id": "88fdc498-456e-4f67-8cf7-176504246a42",
      "name": "Planning Agent"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "Give me 3 video prompts based on the previous \n\nUse the Think tool to review your output",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=Role: You are a prompt-generation AI specializing in satisfying, ASMR-style video prompts for cozy indoor environments overlooking a beautiful outdoor view. Your task is to generate a multi-scene video sequence that captures the ambience from the perspective of a person sitting indoors, immersed in the space and gazing outward. The focus should be on the environment‚Äôs actions ‚Äî shifting light, moving textures, weather patterns, and subtle human interactions with the space ‚Äî rather than on a single object.\n\nYour writing must follow this style:\n\nCinematic realism with medium and wide shots.\n\nThe camera should feel like the viewer‚Äôs own perspective in the room.\n\nAlways show the indoor setting in harmony with the outdoor view (e.g. rain on glass, golden sunlight spilling in, snow slowly falling).\n\nShow environmental changes or subtle actions ‚Äî light flickering from a fire, wind moving curtains, shadows shifting, raindrops racing down glass.\n\nMinimal or no focus on specific handheld objects; the environment is the star.\n\nCamera terms are allowed (e.g. slow pan, dolly-out, wide establishing shot, over-the-shoulder toward the window).\n\nEach scene must contain all of the following:\n\n‚úÖ The indoor space and key details of its design or decor\n‚úÖ The visible outdoor view framed naturally (through windows, doors, open balconies)\n‚úÖ Movement in the environment (e.g. weather outside, light changes, fire crackle, curtain sway)\n‚úÖ A subtle human presence (e.g. shifting in a chair, adjusting blinds, pulling blanket closer) that doesn‚Äôt dominate the frame\n\nDescriptions should show:\n\nIndoor materials and textures ‚Äî wood, fabric, glass, stone.\n\nWeather or outdoor movement as it‚Äôs experienced from inside.\n\nInteraction of light, sound, and atmosphere in the space.\n\nASMR-relevant visual cues like rain rivulets, dust motes in sunlight, flame flicker ‚Äî but always through visuals, never narration.\n\nTone:\n\nSatisfying, serene, and immersive.\n\nNo poetic metaphors, emotion, or storytelling.\n\nAvoid fantasy or surreal imagery.\n\nAll description must feel physically grounded and visually appealing.\n\nLength:\n\nEach scene must be between 1,000 and 2,000 characters.\n\nEach scene should offer a fresh perspective or environmental change ‚Äî different times of day, weather shifts, or camera angles.\n\nInputs:\n\nIdea: \"{{ $json.idea }}\"\nEnvironment: \"{{ $json.environment_prompt }}\"\nSound: \"{{ $json.sound_prompt }}\"\n\nFormat:\n\nIdea: \"...\"\nEnvironment: \"...\"\nSound: \"...\"\n\nScene 1: \"...\"\nScene 2: \"...\"\nScene 3: \"...\"\n(and so on)"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        1360,
        -256
      ],
      "id": "b64ed680-3f31-4515-b21b-220efebd25c1",
      "name": "Prompting Agent"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://queue.fal.run/fal-ai/mmaudio-v2 ",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "application/json",
        "body": "= {\n        \"prompt\": \"ASMR Soothing sound effects. {{ $('Prompting Agent').item.json.output.Sound }}\",\n        \"duration\": 10,\n        \"video_url\": \"{{ $json.data.outputs[0] }}\"\n  }\n",
        "options": {
          "batching": {
            "batch": {
              "batchSize": 1,
              "batchInterval": 2000
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1984,
        -48
      ],
      "id": "435a3b17-85ce-4be8-ac8b-8c4029e14818",
      "name": "Generate Sounds",
      "credentials": {
        "httpHeaderAuth": {
          "id": "oO0uSbUI4Y3PgZWb",
          "name": "Fal Creds"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "function findSceneEntries(obj) {\n  const scenes = [];\n\n  for (const [key, value] of Object.entries(obj)) {\n    if (key.toLowerCase().startsWith(\"scene\") && typeof value === \"string\") {\n      scenes.push(value);\n    } else if (typeof value === \"object\" && value !== null) {\n      scenes.push(...findSceneEntries(value));\n    }\n  }\n\n  return scenes;\n}\n\nlet output = [];\n\ntry {\n  const inputData = items[0].json;\n  const scenes = findSceneEntries(inputData);\n\n  if (scenes.length === 0) {\n    throw new Error(\"No scene keys found at any level.\");\n  }\n\n  output = scenes.map(scene => ({ description: scene }));\n} catch (e) {\n  throw new Error(\"Could not extract scenes properly. Details: \" + e.message);\n}\n\nreturn output;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1760,
        -256
      ],
      "id": "5ad144e9-9a25-4fa2-a5b2-10aa5eb2bea7",
      "name": "Format Prompts"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    video_urls: items.map(item => item.json.video.url)\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1984,
        160
      ],
      "id": "d5a06558-0e2d-4f19-8181-bab461c125a1",
      "name": "List Elements"
    },
    {
      "parameters": {
        "amount": 120
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2192,
        -48
      ],
      "id": "1dc9e711-09e0-44c7-aebf-a49736a839c9",
      "name": "Wait Sounds",
      "webhookId": "194bf025-6791-46a1-ad75-6c3ddfea0a6c"
    },
    {
      "parameters": {
        "amount": 120
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2192,
        -256
      ],
      "id": "e480dbf0-842b-4d4f-a63b-d2217bcf8c62",
      "name": "Wait Clips",
      "webhookId": "67589d52-8547-4940-ba03-ea177f5e1b4a"
    },
    {
      "parameters": {
        "url": "=https://queue.fal.run/fal-ai/mmaudio-v2/requests/{{ $json.request_id }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1760,
        160
      ],
      "id": "44346cc5-cf23-410b-973d-a57885630f6a",
      "name": "Get Sounds",
      "credentials": {
        "httpHeaderAuth": {
          "id": "oO0uSbUI4Y3PgZWb",
          "name": "Fal Creds"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://queue.fal.run/fal-ai/ffmpeg-api/compose",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "application/json",
        "body": "={\n  \"tracks\": [\n    {\n      \"id\": \"1\",\n      \"type\": \"video\",\n      \"keyframes\": [\n        { \"url\": \"{{ $json.video_urls[0] }}\", \"timestamp\": 0, \"duration\": 10 },\n        { \"url\": \"{{ $json.video_urls[1] }}\", \"timestamp\": 10, \"duration\": 10 },\n        { \"url\": \"{{ $json.video_urls[2] }}\", \"timestamp\": 20, \"duration\": 10 }\n      ]\n    }\n  ]\n}",
        "options": {
          "batching": {
            "batch": {
              "batchSize": 1,
              "batchInterval": 2000
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2192,
        160
      ],
      "id": "080641d7-4d35-48e7-a9dd-2e6846268255",
      "name": "Sequence Video",
      "credentials": {
        "httpHeaderAuth": {
          "id": "oO0uSbUI4Y3PgZWb",
          "name": "Fal Creds"
        }
      }
    },
    {
      "parameters": {
        "amount": 120
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1856,
        384
      ],
      "id": "f327d3fb-ae7f-48d2-9607-a141dba6bc07",
      "name": "Wait Final Video",
      "webhookId": "b5a0625f-4c0d-4785-afc5-cf9003daad19"
    },
    {
      "parameters": {
        "url": "=https://queue.fal.run/fal-ai/ffmpeg-api/requests/{{ $json.request_id }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2064,
        384
      ],
      "id": "50544a60-4a11-4d23-aa33-72f828f98864",
      "name": "Get Final Video",
      "credentials": {
        "httpHeaderAuth": {
          "id": "oO0uSbUI4Y3PgZWb",
          "name": "Fal Creds"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1eGgPfwvMQUWWuHpqmOfh4qAMoaGkFCWGoK7tfHNqsRE",
          "mode": "list",
          "cachedResultName": "Youtube Vid Ideas",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1eGgPfwvMQUWWuHpqmOfh4qAMoaGkFCWGoK7tfHNqsRE/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1eGgPfwvMQUWWuHpqmOfh4qAMoaGkFCWGoK7tfHNqsRE/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Caption": "={{ $json.output[0].Caption }}",
            "Idea": "={{ $json.output[0].Idea }}",
            "Environment ": "={{ $json.output[0].Environment }}",
            "Sound ": "={{ $json.output[0].Sound }}",
            "Status": "={{ $json.output[0].Status }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Caption",
              "displayName": "Caption",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Idea",
              "displayName": "Idea",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Environment ",
              "displayName": "Environment ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Sound ",
              "displayName": "Sound ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "video_url",
              "displayName": "video_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "thumbnail_url",
              "displayName": "thumbnail_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "YT Link",
              "displayName": "YT Link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        1136,
        -256
      ],
      "id": "81070bd2-ab8d-4d08-90d0-4b4bb02ca612",
      "name": "Log Ideas to Sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "2DXc4UrXLDKzZiLV",
          "name": "Google Sheets account 2"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $('Get Final Video').item.json.video_url }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1008,
        192
      ],
      "id": "034874db-ad3f-408d-97eb-bd8d9ce649e3",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "resource": "video",
        "operation": "upload",
        "title": "=ASMR Video: {{ $('Update Final Video to Sheet').item.json.Idea }}",
        "regionCode": "PH",
        "categoryId": "1",
        "options": {
          "description": "={{ $('Log Ideas to Sheet').first().json.Idea }}\n",
          "privacyStatus": "public",
          "selfDeclaredMadeForKids": false,
          "tags": "relaxing indoor scenes, asmr sounds, youtube shorts, viral shorts"
        }
      },
      "type": "n8n-nodes-base.youTube",
      "typeVersion": 1,
      "position": [
        1216,
        192
      ],
      "id": "f0f9a2ce-2504-47a0-94b2-4de66600c117",
      "name": "Upload a video",
      "credentials": {
        "youTubeOAuth2Api": {
          "id": "hFKi5nN2jppTN9rj",
          "name": "YouTube account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1eGgPfwvMQUWWuHpqmOfh4qAMoaGkFCWGoK7tfHNqsRE",
          "mode": "list",
          "cachedResultName": "Youtube Vid Ideas",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1eGgPfwvMQUWWuHpqmOfh4qAMoaGkFCWGoK7tfHNqsRE/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1eGgPfwvMQUWWuHpqmOfh4qAMoaGkFCWGoK7tfHNqsRE/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Status": "Done",
            "video_url": "={{ $json.video_url }}",
            "thumbnail_url": "={{ $json.thumbnail_url }}",
            "Idea": "={{ $('Log Ideas to Sheet').first().json.Idea }}"
          },
          "matchingColumns": [
            "Idea"
          ],
          "schema": [
            {
              "id": "Caption",
              "displayName": "Caption",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Idea",
              "displayName": "Idea",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Environment ",
              "displayName": "Environment ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Sound ",
              "displayName": "Sound ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "video_url",
              "displayName": "video_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "thumbnail_url",
              "displayName": "thumbnail_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "YT Link",
              "displayName": "YT Link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        800,
        192
      ],
      "id": "bbdfe1d3-ab95-4bf0-b6fa-62d8df009759",
      "name": "Update Final Video to Sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "2DXc4UrXLDKzZiLV",
          "name": "Google Sheets account 2"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Idea Generator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Idea Generator",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Idea Generator": {
      "main": [
        [
          {
            "node": "Planning Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Planning Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Planning Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Prompting Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Prompting Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Create Wavespeed Clips": {
      "main": [
        [
          {
            "node": "Wait Clips",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Wavespeed Clips": {
      "main": [
        [
          {
            "node": "Generate Sounds",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Planning Agent": {
      "main": [
        [
          {
            "node": "Log Ideas to Sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prompting Agent": {
      "main": [
        [
          {
            "node": "Format Prompts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Sounds": {
      "main": [
        [
          {
            "node": "Wait Sounds",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Prompts": {
      "main": [
        [
          {
            "node": "Create Wavespeed Clips",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait Clips": {
      "main": [
        [
          {
            "node": "Get Wavespeed Clips",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait Sounds": {
      "main": [
        [
          {
            "node": "Get Sounds",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Sounds": {
      "main": [
        [
          {
            "node": "List Elements",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Elements": {
      "main": [
        [
          {
            "node": "Sequence Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sequence Video": {
      "main": [
        [
          {
            "node": "Wait Final Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait Final Video": {
      "main": [
        [
          {
            "node": "Get Final Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Final Video": {
      "main": [
        [
          {
            "node": "Update Final Video to Sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Ideas to Sheet": {
      "main": [
        [
          {
            "node": "Prompting Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Upload a video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Final Video to Sheet": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "fa1724ff-59c8-4b2a-bb2f-803c8e42c81c",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "7f54f0d36ff1124890b2138955280c2c95225acd40a1709b12a07276e2c3eff9"
  },
  "id": "3CNRqqvY1zFca5q9",
  "tags": []
}